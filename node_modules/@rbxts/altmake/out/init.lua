-- Compiled with roblox-ts v1.2.9
--[[
	*
	* Modifies an instance with the specified properties.
	*
	* This applies the properties to the instance, including events
	* and then moves on to applying the children, and finally the
	* parent of the instance.
	*
	* Note that this does NOT clear previous children,
	* rather it will only parent all of the children
	* to the instance if any were specified.
	*
	* @param instance The instance to modify.
	* @param props The properties to apply.
	* @returns The instance passed in.
]]
local function Modify(instance, props)
	if props == {} then
		return instance
	end
	local parent = props.Parent
	local children = props.Children
	props.Parent = nil
	props.Children = nil
	for _element, _element_1 in pairs(props) do
		local entry = { _element, _element_1 }
		local _binding = entry
		local key = _binding[1]
		local value = _binding[2]
		local property = instance[key]
		if typeof(property) == "RBXScriptSignal" then
			property:Connect(value)
		else
			instance[key] = value
		end
	end
	if children then
		if typeof(children) == "Instance" then
			children.Parent = instance
		else
			local _arg0 = function(child)
				child.Parent = instance
				return child.Parent
			end
			-- ▼ ReadonlyArray.forEach ▼
			for _k, _v in ipairs(children) do
				_arg0(_v, _k - 1, children)
			end
			-- ▲ ReadonlyArray.forEach ▲
		end
	end
	if parent then
		instance.Parent = parent
	end
	return instance
end
--[[
	*
	* Creates an instance with the specified properties and returns it.
	* This will create the instance and pass it to the
	* {@link Modify} function, which will apply the properties.
	*
	* @param className The type of instance to create.
	* @param props The properties to apply.
	* @returns The created instance.
]]
local function Make(className, props)
	if props == nil then
		props = {}
	end
	local instance = Instance.new(className)
	return Modify(instance, props)
end
--[[
	*
	* Clones an instance and applies the specified properties to the new
	* instance. By default, roblox-ts types `.Clone()` as always returning
	* an instance, but there is a tiny chance that the instance which is
	* being cloned has `Archivable` set to false, which means cloning it
	* will return undefined (most notably, player characters). To account for
	* this, this function will, by default, set `Archivable` to true. If
	* manually disabled, the typings for this function will change, indicating
	* a possible undefined return.
	*
	* @param instance The instance to clone.
	* @param props The properties to apply.
	* @param ensureArchivable Whether to set archivable to true automatically, defaults to true.
	* @returns The cloned instance.
]]
local function Clone(instance, props, ensureArchivable)
	if props == nil then
		props = {}
	end
	local _condition = ensureArchivable
	if _condition == nil then
		_condition = true
	end
	if _condition ~= 0 and (_condition == _condition and (_condition ~= "" and _condition)) then
		instance.Archivable = true
	end
	local clone = instance:Clone()
	if not clone then
		return nil
	end
	return Modify(clone, props)
end
return {
	Modify = Modify,
	Make = Make,
	Clone = Clone,
}
